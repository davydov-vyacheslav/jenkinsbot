# Perform build with unit tests

name: "JenkinsBot-Build"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: bootJar

  coverage:
    needs: build
    name: Unit Testing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: test
      - uses: codecov/codecov-action@v1
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          name: codecov
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: jUnit Tests Results
          path: build/test-results/test/TEST-*.xml
          reporter: java-junit

  deploy:
    name: Deployment
    needs: coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Collect Project version
        run: |
          ./gradlew properties -q | grep "version:" | awk '{print $2}' | xargs -n1 -I{} echo "project_version="{}  >> $GITHUB_ENV
      - name: Spring Boot jar
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: bootJar
      - name: "Trace: Output env"
        run: |
          echo ${{ env.project_version }}

      - if: "!contains(env.project_version, '-SNAPSHOT')"
        run: |
          echo 'Release version processing'

      # TODO: get ri of me: replace by GHA docker builds
      # TODO: grab artifact from "build/Build with Gradle"
      - name: Build with Gradle
        if: "!contains(env.project_version, '-SNAPSHOT')"
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: release
#      - name: Generate changelog
#        if: "!contains(env.project_version, '-SNAPSHOT')"
#        id: changelog
#        uses: metcalfc/changelog-generator@v3.0.0
#        with:
#          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        if: "!contains(env.project_version, '-SNAPSHOT')"
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/libs/jenkinsBot-${{ env.project_version }}.jar
          body: |
            New version is available: ${{ env.project_version }}
#
#            ### Things that changed in this release
#            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          tag_name: ${{ env.project_version }}
          name: ${{ env.project_version }}
      # TODO: docker push :env.project_version ; latest

      - if: contains(env.project_version, '-SNAPSHOT')
        run: |
          echo 'SNAPSHOT version processing'
# TODO: docker push :latest

# TODO: remove me
  test-deploy:
    name: Test Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Spring Boot jar
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: bootJar

      - name: Build and push latest
        uses: docker/build-push-action@v3
        with:
#          push: true
          tags: davs87/jenkinsbot:latest
          context: .

# TODO: push to docker:latest; push davs87/jenkinsbot:0.x.x if no SNAPSHOT
#      - name: Build and push
#        uses: docker/build-push-action@v3
#        with:
#          push: true
#          tags: davs87/jenkinsbot:latest
#          context: "{{defaultContext}}:mysubdir"

