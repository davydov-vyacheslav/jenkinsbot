# Perform build with unit tests

name: "JenkinsBot-Build"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: bootJar

  coverage:
    needs: build
    name: Run Unit tests and perform Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: test
      - uses: codecov/codecov-action@v1
        with:
          file: ./build/reports/jacoco/test/jacocoTestReport.xml
          name: codecov
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: jUnit Tests Results
          path: build/test-results/test/TEST-*.xml
          reporter: java-junit

  deploy:
    name: Deployment
    needs: coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4
      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Collect Project version
        run: |
          ./gradlew properties -q | grep "version:" | awk '{print $2}' | xargs -n1 -I{} echo "project_version="{}  >> $GITHUB_ENV
      - name: Spring Boot jar
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: bootJar
      - name: "Trace: Output env"
        run: |
          echo ${{ env.project_version }}

      - if: "!contains(env.project_version, '-SNAPSHOT')"
        run: |
          echo 'Release version processing'

      # TODO: use composite action (?)
      - name: Build with Gradle
        if: "!contains(env.project_version, '-SNAPSHOT')"
        uses: gradle/gradle-build-action@v2.1.5
        with:
          arguments: release
#      - name: Generate changelog
#        if: "!contains(env.project_version, '-SNAPSHOT')"
#        id: changelog
#        uses: metcalfc/changelog-generator@v3.0.0
#        with:
#          myToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Release
        if: "!contains(env.project_version, '-SNAPSHOT')"
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/libs/jenkinsBot-${{ env.project_version }}.jar
          body: |
            New version is available: ${{ env.project_version }}
#
#            ### Things that changed in this release
#            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          tag_name: ${{ env.project_version }}
          name: ${{ env.project_version }}
      # TODO: docker push :env.project_version

      - if: contains(env.project_version, '-SNAPSHOT')
        run: |
          echo 'SNAPSHOT version processing'
# TODO: docker push :latest


# TODO: push to docker:latest; push davs87/jenkinsbot:0.x.x if no SNAPSHOT
#      - name: Build and push
#        uses: docker/build-push-action@v3
#        with:
#          push: true
#          tags: davs87/jenkinsbot:latest
#          context: "{{defaultContext}}:mysubdir"

# TODO: exchange artifact
#      - name: Upload output file
#        uses: actions/upload-artifact@v3
#        with:
#          name: output-log-file
#          path: output.log

#  - name: Download a single artifact
#      uses: actions/download-artifact@v3
#      with:
#        name: output-log-file



#
#      - name: Upload jacoco exec results
#        uses: actions/upload-artifact@v2
#        with:
#          name: unit-tests-jacoco
#          path: exportJacoco/jacoco-fast.exec

#      - name: Add JaCoCo coverage to PR
#        id: jacoco
#        uses: madrapps/jacoco-report@v1.2
#        with:
#          paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
#          token: ${{ secrets.GITHUB_TOKEN }}
#          min-coverage-overall: 40
#          min-coverage-changed-files: 60
#      - name: Generate JaCoCo Badge
#        uses: cicirello/jacoco-badge-generator@v2
#        with:
#          generate-branches-badge: true
#          badges-directory: badges
#          jacoco-csv-file: build/reports/jacoco/test/jacocoTestReport.csv
#          generate-summary: true
#      - name: Upload JaCoCo coverage report as a workflow artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: jacoco-report
#          path: build/reports/jacoco/test/
## FIXME ???
#      - name: Commit and push the coverage badges and summary file
#        if: ${{ github.event_name != 'pull_request' }}
#        run: |
#          cd badges
#          if [[ `git status --porcelain *.svg *.json` ]]; then
#            git config --global user.name 'github-actions'
#            git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
#            git add *.svg *.json
#            git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
#            git push
#          fi
#      - name: Comment on PR with coverage percentages
#        if: ${{ github.event_name == 'pull_request' }}
#        run: |
#          REPORT=$(<badges/coverage-summary.json)
#          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
#          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
#          NEWLINE=$'\n'
#          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
#          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}